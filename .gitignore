# =============================================================================
# TUM Chatbot - Git Ignore File
# =============================================================================

# =============================================================================
# Python Backend
# =============================================================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  *.iml
#  *.ipr
#  *.iws
.idea/
*.iml
*.ipr
*.iws

# =============================================================================
# Node.js Frontend
# =============================================================================

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# =============================================================================
# Docker
# =============================================================================

# Docker build context
.dockerignore

# Docker volumes
docker-volumes/

# =============================================================================
# Project-Specific Files
# =============================================================================

# Environment files (contains sensitive data)
.env
.env.local
.env.development
.env.production
.env.test

# API Keys and Secrets
*.key
*.pem
*.p12
*.pfx
secrets/
secrets.json
config.json

# Database files
*.db
*.sqlite
*.sqlite3
backend/statistics.db
backend/chroma_db/
chroma_db/
data/
/app/data/

# Log files
logs/
*.log
backend/logs/
/app/logs/
tum_chatbot.log
tum_chatbot_error.log
chat_sessions.log

# Vector database
chroma_db/
/app/chroma_db/
backend/chroma_db/

# Statistics and analytics
statistics.db
statistics_backup_*.db
backend/statistics.db
backend/statistics_backup_*.db

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Backup files
*.bak
*.backup
*_backup_*
backup_*

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE and Editor files
.vscode/
.idea/
*.swp
*.swo
*~

# =============================================================================
# Development and Testing
# =============================================================================

# Test files
test_*.py
*_test.py
tests/
test/

# Coverage reports
htmlcov/
.coverage
coverage.xml

# Jupyter notebooks
*.ipynb
.ipynb_checkpoints/

# Documentation builds
docs/_build/
site/

# =============================================================================
# Production and Deployment
# =============================================================================

# Production builds
dist/
build/
out/

# Deployment files
deploy/
deployment/

# SSL certificates
*.crt
*.csr
*.key
*.pem

# =============================================================================
# Monitoring and Analytics
# =============================================================================

# Performance monitoring
monitoring/
metrics/

# Analytics data
analytics/
stats/

# =============================================================================
# Cleanup Scripts
# =============================================================================

# Cleanup scripts (keep the script but ignore generated files)
cleanup_stats.sh
monitor.sh

# =============================================================================
# Knowledge Base (if contains sensitive data)
# =============================================================================

# Uncomment if TUM_QA.json contains sensitive information
# TUM_QA.json

# =============================================================================
# Archive and Compressed Files
# =============================================================================

# Compressed files
*.zip
*.tar.gz
*.rar
*.7z

# Archive directories
archive/
archives/

# =============================================================================
# Local Development Overrides
# =============================================================================

# Local configuration overrides
local_config.py
local_settings.py

# Development-specific files
dev/
development/

# =============================================================================
# Security and Compliance
# =============================================================================

# Security scan results
security/
vulnerabilities/

# Compliance reports
compliance/
audit/

# =============================================================================
# Performance and Profiling
# =============================================================================

# Profiling data
*.prof
*.profile

# Performance logs
perf/
performance/

# =============================================================================
# Machine Learning and AI
# =============================================================================

# Model files
*.model
*.pkl
*.pickle
*.joblib

# Training data
training_data/
models/

# =============================================================================
# Backup and Recovery
# =============================================================================

# Backup directories
backups/
backup/

# Recovery files
recovery/
*.recovery

# =============================================================================
# End of File
# ============================================================================= 